### Dicas Importantes sobre Django e Git ###
!!!!!!!!!!!!!LEIAM ATE O FINAL PFV!!!!!!!!!!!!!!!!
## Introdução ao Django ##
Django é um framework web de alto nível em Python que facilita a criação de sites e aplicações web.
Ele é conhecido por seguir o princípio "DRY" (Don't Repeat Yourself), que promove a reutilização de código e a eficiência.

## Estrutura de um Projeto Django ##

Quando você cria um projeto Django, ele gera uma estrutura de diretórios e arquivos. Aqui está uma descrição do que cada parte faz:

# manage.py: Um script que permite gerenciar o projeto Django. Você pode usar este arquivo para executar comandos como iniciar o servidor, criar migrações, aplicar migrações, etc.
# settings.py: Contém todas as configurações do seu projeto, como configuração de banco de dados, idiomas, fuso horário, apps instalados, entre outros.
# urls.py: Define as rotas (URLs) do seu projeto. Aqui você especifica quais visualizações (views) devem ser chamadas para diferentes URLs.
# wsgi.py: Um ponto de entrada para servidores web que suportam o protocolo WSGI. Este arquivo é utilizado para implantar seu projeto em um servidor de produção.
# asgi.py: Um ponto de entrada para servidores web que suportam o protocolo ASGI. Este arquivo é utilizado para implantar seu projeto em um servidor de produção.
# apps/: É onde você cria seus aplicativos (apps). Cada app deve ter sua própria pasta contendo arquivos como models.py, views.py, admin.py, e migrations/.
# migrations/: Armazena os arquivos de migração que são usados para modificar o esquema do banco de dados.

## Principais Comandos do Django ##

# Criar um projeto:
django-admin startproject nome_do_projeto
# Criar um app:
python manage.py startapp nome_do_app
# Executar o servidor de desenvolvimento:
python manage.py runserver
# Criar migrações:
python manage.py makemigrations
# Aplicar migrações:
python manage.py migrate
# Criar superusuário:
python manage.py createsuperuser
# Acessar o shell do Django:
python manage.py shell

## Comandos Git Básicos ##

# Clonar um repositório (usem o proprio VSCode de preferencia e tenham certeza que estao com a conta correta do GitHub vinculada com o VSCode):
git clone https://github.com/usuario/nome_do_repositorio.git

# Verificar o estado do repositório: Para ver quais arquivos foram alterados:
git status .

# Adicionar mudanças: Para adicionar arquivos alterados ao staging area, preparado para receber o commit:
git add nome_do_arquivo   (Para adicionar um arquivo específico)
git add .                 (Para adicionar todas as mudanças)

# Fazer um commit: Para salvar suas alterações no repositório LOCAL:
git commit -m "Mensagem explicativa sobre o que foi alterado"

# Enviar as alterações para o repositório remoto: Para enviar suas mudanças para o repositório remoto:
git push               (Caso você já esteja na branch correta, use apenas esse comando)
git push origin main   (Troque 'main' pelo nome da sua branch, se necessário)

## Passo a Passo para Clonagem e Commit ##

!Clone o repositório!
!Navegue até o diretório do projeto!
!Faça as alterações necessárias no código!
!Verifique o estado do repositório!
!Adicione os arquivos alterados!
!Faça um commit das suas alterações!
!Envie as alterações para o repositório remoto!

NAO ESQUEÇAM DA IMPORTANCIA DOS COMANDOS
-- git pull --
-- git rebase main --
DURANTE A CLONAGEM DE UM PROJETO, PARA EVITAR CONFLITOS E PROBLEMAS COM A BRANCH PRINCIPAL


## Em Django, um app (ou "aplicativo") é um módulo ou componente dentro do projeto que serve para encapsular uma funcionalidade específica. ##
## Cada app pode ser responsável por uma parte distinta da lógica de negócios do projeto, como a gestão de usuários, a criação de blogs, fóruns, ou qualquer ##
## outro recurso específico que o projeto precise. ##

# Um projeto Django pode ter vários apps, e cada app é projetado para ser reutilizável em diferentes projetos.

# Estrutura básica de um app em Django:
nome_do_app/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

# models.py: Onde você define as classes que representam as tabelas do banco de dados.
# views.py: Onde você define as funções ou classes que processam as requisições e devolvem as respostas (HTML, JSON, etc.).
# admin.py: Onde você configura como as entidades do seu app vão aparecer no painel administrativo do Django.
# migrations/: Armazena os arquivos de migração que são usados para atualizar o esquema do banco de dados conforme os modelos mudam.
# tests.py: Onde você escreve os testes unitários do seu app.


## Para que serve o comando migrate? ##
O comando migrate no Django é utilizado para aplicar as migrações ao banco de dados.
Migrações são uma maneira de alterar o esquema do banco de dados (como a criação, alteração ou exclusão de tabelas) com base nas mudanças feitas nos modelos do Django.

# Criação de Modelos: Quando você define ou altera um modelo no arquivo models.py, o Django detecta essas mudanças.
# Gerar migrações: Para registrar essas mudanças no banco de dados, você roda o comando: python manage.py makemigrations
# Aplicar migrações: Uma vez que as migrações foram criadas, você usa o comando migrate para aplicá-las ao banco de dados: python manage.py migrate


DETALHE MT IMPORTANTE, SEMPRE QUE FOREM CODAR NOVAMENTE, REALIZAR UM CLONE, ATIVEM O AMBIENTE VIRTUAL (venv), ISSO EH MT IMPORTANTE PARA EVITAR CONFLITOS
COM OUTRAS EXTENSOES QUE SEU COMPUTADOR POSSUI, ELE FAZ COM QUE TUDO QUE VOCE INSTALAR PARA O PROJETO QUE VOCE ESTA DESENVOLVENDO, FIQUE UTILIZAVEL SOMENTE
DENTRO DAQUELE PROJETO, ASSIM QUE DER O CLONE, JA REALIZEM A ATIVACAO DO venv

OUTRO DETALHE, APOS ATIVAR O VENV, USEM O COMANDO "pip install -r requirements.txt" PARA BAIXAR TODAS AS EXTENSOES QUE ESTAO LISTADAS NO requirements.txt, MAS
FAÇA ISSO APENAS DEPOIS DE ATIVAR A VENV, E SEMPRE QUE INICIAR O PROJETO NOVAMENTE VOCE DEVE UTILIZAR ESSE COMANDO, POIS OS ARQUIVOS SO ESTARAO INSTALADOS DURANTE
A EXECUÇÃO DO AMBIENTE VIRTUAL